# Organizando los datos para el mapa --------------------------------------
smm <- tbl %>%
group_by(codigo, atencion) %>%
dplyr::summarise(count = n()) %>%
ungroup() %>%
spread(atencion, count) %>%
setNames(c('codigo', 'casa', 'fallecido', 'hospital', 'uci', 'na', 'recuperado'))
smm
sms$norecuperado <- smm$casa + smm$hospital + smm$uci
smm$norecuperado <- smm$casa + smm$hospital + smm$uci
smm
smm <- smm %>% dplyr::select(codigo, recuperado, no recuperado, na)
smm
smm <- smm %>% dplyr::select(codigo, recuperado, norecuperado, na)
smm
smm[is.na(smm)]
smm[is.na(smm)] <- 0
smm
smm
smm
shp <- st_read('../shapefiles/MGN_MPIO_POLITICO.shp')
shp
str(shp)
shp <- shp %>% mutate(MPIO_CCNCT = as.numeric(MPIO_CCNCT))
shp
inner_join(shp, smm, by = c('MPIO_CCNCT' = 'codigo'))
MPIO_CCNCT
shp <- shp %>% mutate(MPIO_CCNCT = as.numeric(MPIO_CCNCT))
inner_join(shp, smm, by = c('MPIO_CCNCT' = 'codigo'))
shp
smm
smm$codigo <- as.numeric(smm$codigo)
inner_join(shp, smm, by = c('MPIO_CCNCT' = 'codigo'))
smm
smm <- smm %>%
gather(var, value, -codigo)
smm
smm
unique(smm$var)
smm <- smm %>%
group_by(codigo, var) %>%
mutate(porc = value / sum(value) * 100) %>%
ungroup()
smm
# Organizando los datos para el mapa --------------------------------------
smm <- tbl %>%
group_by(codigo, atencion) %>%
dplyr::summarise(count = n()) %>%
ungroup() %>%
spread(atencion, count) %>%
setNames(c('codigo', 'casa', 'fallecido', 'hospital', 'uci', 'na', 'recuperado'))
smm$norecuperado <- smm$casa + smm$hospital + smm$uci
smm <- smm %>% dplyr::select(codigo, recuperado, norecuperado, na)
smm[is.na(smm)] <- 0
smm$codigo <- as.numeric(smm$codigo)
smm <- smm %>%
gather(var, value, -codigo)
smm <- smm %>%
group_by(codigo, var) %>%
mutate(porc = value / sum(value, na.rm = T) * 100) %>%
ungroup()
smm
is.nan(smm)
smm[is.nan(smm)]
is.nan
is.nan(smm$porc)
ifelse(is.nan(smm$porc), 0, smm$porc)
smm
# Organizando los datos para el mapa --------------------------------------
smm <- tbl %>%
group_by(codigo, atencion) %>%
dplyr::summarise(count = n()) %>%
ungroup() %>%
spread(atencion, count) %>%
setNames(c('codigo', 'casa', 'fallecido', 'hospital', 'uci', 'na', 'recuperado'))
smm$norecuperado <- smm$casa + smm$hospital + smm$uci
smm <- smm %>% dplyr::select(codigo, recuperado, norecuperado, na)
smm[is.na(smm)] <- 0
smm$codigo <- as.numeric(smm$codigo)
smm <- smm %>%
gather(var, value, -codigo)
smm <- smm %>%
group_by(codigo) %>%
mutate(porc = value / sum(value, na.rm = T) * 100) %>%
ungroup()
smm
ifelse(is.nan(smm$porc), 0, smm$porc)
smm$porc <- ifelse(is.nan(smm$porc), 0, smm$porc)
smm
inner_join(shp, smm, by = c('MPIO_CCNCT' = 'codigo'))
shp <- inner_join(shp, smm, by = c('MPIO_CCNCT' = 'codigo'))
shp
# Organizando los datos para el mapa --------------------------------------
smm <- tbl %>%
group_by(codigo, atencion) %>%
dplyr::summarise(count = n()) %>%
ungroup() %>%
spread(atencion, count) %>%
setNames(c('codigo', 'casa', 'fallecido', 'hospital', 'uci', 'na', 'recuperado'))
smm$norecuperado <- smm$casa + smm$hospital + smm$uci
smm <- smm %>% dplyr::select(codigo, recuperado, norecuperado, na)
smm[is.na(smm)] <- 0
smm$codigo <- as.numeric(smm$codigo)
smm <- smm %>%
gather(var, value, -codigo)
smm <- smm %>%
group_by(codigo) %>%
mutate(porc = value / sum(value, na.rm = T) * 100) %>%
ungroup()
smm$porc <- ifelse(is.nan(smm$porc), 0, smm$porc)
smm
smm %>%
spread(var, value)
smm %>% dplyr::select(-porc)
smm_value <- smm %>% dplyr::select(-porc) %>% spread(var, value)
smm_value
smm_value <- smm %>% setNames(c('codigo', 'val_na', 'val_nr', 'val_r'))
smm_porcn <- smm %>% dplyr::select(-value) %>% spread(var, porc)
smm_porcn
smm_porcn
smm <- inner_join(smm_value, smm_porcn, by = 'codigo')
shp <- inner_join(shp, smm, by = c('MPIO_CCNCT' = 'codigo'))
shp
# Organizando los datos para el mapa --------------------------------------
smm <- tbl %>%
group_by(codigo, atencion) %>%
dplyr::summarise(count = n()) %>%
ungroup() %>%
spread(atencion, count) %>%
setNames(c('codigo', 'casa', 'fallecido', 'hospital', 'uci', 'na', 'recuperado'))
smm$norecuperado <- smm$casa + smm$hospital + smm$uci
smm <- smm %>% dplyr::select(codigo, recuperado, norecuperado, na)
smm[is.na(smm)] <- 0
smm$codigo <- as.numeric(smm$codigo)
smm <- smm %>%
gather(var, value, -codigo)
smm <- smm %>%
group_by(codigo) %>%
mutate(porc = value / sum(value, na.rm = T) * 100) %>%
ungroup()
smm$porc <- ifelse(is.nan(smm$porc), 0, smm$porc)
smm_value <- smm %>% dplyr::select(-porc) %>% spread(var, value)
smm_value <- smm %>% setNames(c('codigo', 'val_na', 'val_nr', 'val_r'))
smm_porcn <- smm %>% dplyr::select(-value) %>% spread(var, porc)
smm_porcn <- smm %>% setNames(c('codigo', 'prc_na', 'prc_nr', 'prc_r'))
smm <- inner_join(smm_value, smm_porcn, by = 'codigo')
smm
# Organizando los datos para el mapa --------------------------------------
smm <- tbl %>%
group_by(codigo, atencion) %>%
dplyr::summarise(count = n()) %>%
ungroup() %>%
spread(atencion, count) %>%
setNames(c('codigo', 'casa', 'fallecido', 'hospital', 'uci', 'na', 'recuperado'))
smm$norecuperado <- smm$casa + smm$hospital + smm$uci
smm <- smm %>% dplyr::select(codigo, recuperado, norecuperado, na)
smm[is.na(smm)] <- 0
smm$codigo <- as.numeric(smm$codigo)
smm <- smm %>%
gather(var, value, -codigo)
smm <- smm %>%
group_by(codigo) %>%
mutate(porc = value / sum(value, na.rm = T) * 100) %>%
ungroup()
smm$porc <- ifelse(is.nan(smm$porc), 0, smm$porc)
smm
smm_value <- smm %>% dplyr::select(-porc) %>% spread(var, value)
smm_value <- smm %>% setNames(c('codigo', 'val_na', 'val_nr', 'val_r'))
smm_value
smm_value <- smm %>% dplyr::select(-porc) %>% spread(var, value)
smm_value
smm_value <- smm %>% setNames(c('codigo', 'val_na', 'val_nr', 'val_r'))
smm_value
smm_value <- smm %>% dplyr::select(-porc) %>% spread(var, value)
View(smm_porcn)
smm_value <- smm %>% dplyr::select(-porc) %>% spread(var, value)
smm_value <- smm_value %>% setNames(c('codigo', 'val_na', 'val_nr', 'val_r'))
smm_porcn <- smm %>% dplyr::select(-value) %>% spread(var, porc)
smm_porcn <- smm_porcn %>% setNames(c('codigo', 'prc_na', 'prc_nr', 'prc_r'))
# Organizando los datos para el mapa --------------------------------------
smm <- tbl %>%
group_by(codigo, atencion) %>%
dplyr::summarise(count = n()) %>%
ungroup() %>%
spread(atencion, count) %>%
setNames(c('codigo', 'casa', 'fallecido', 'hospital', 'uci', 'na', 'recuperado'))
smm$norecuperado <- smm$casa + smm$hospital + smm$uci
smm <- smm %>% dplyr::select(codigo, recuperado, norecuperado, na)
smm[is.na(smm)] <- 0
smm$codigo <- as.numeric(smm$codigo)
smm <- smm %>%
gather(var, value, -codigo)
smm <- smm %>%
group_by(codigo) %>%
mutate(porc = value / sum(value, na.rm = T) * 100) %>%
ungroup()
smm$porc <- ifelse(is.nan(smm$porc), 0, smm$porc)
smm_value <- smm %>% dplyr::select(-porc) %>% spread(var, value)
smm_value <- smm_value %>% setNames(c('codigo', 'val_na', 'val_nr', 'val_r'))
smm_porcn <- smm %>% dplyr::select(-value) %>% spread(var, porc)
smm_porcn <- smm_porcn %>% setNames(c('codigo', 'prc_na', 'prc_nr', 'prc_r'))
smm_porcn
smm_value
smm <- inner_join(smm_value, smm_porcn, by = 'codigo')
shp <- inner_join(shp, smm, by = c('MPIO_CCNCT' = 'codigo'))
shp
shp <- st_read('../shapefiles/MGN_MPIO_POLITICO.shp')
shp <- shp %>% mutate(MPIO_CCNCT = as.numeric(MPIO_CCNCT))
# Organizando los datos para el mapa --------------------------------------
smm <- tbl %>%
group_by(codigo, atencion) %>%
dplyr::summarise(count = n()) %>%
ungroup() %>%
spread(atencion, count) %>%
setNames(c('codigo', 'casa', 'fallecido', 'hospital', 'uci', 'na', 'recuperado'))
smm$norecuperado <- smm$casa + smm$hospital + smm$uci
smm <- smm %>% dplyr::select(codigo, recuperado, norecuperado, na)
smm[is.na(smm)] <- 0
smm$codigo <- as.numeric(smm$codigo)
smm <- smm %>%
gather(var, value, -codigo)
smm <- smm %>%
group_by(codigo) %>%
mutate(porc = value / sum(value, na.rm = T) * 100) %>%
ungroup()
smm$porc <- ifelse(is.nan(smm$porc), 0, smm$porc)
smm_value <- smm %>% dplyr::select(-porc) %>% spread(var, value)
smm_value <- smm_value %>% setNames(c('codigo', 'val_na', 'val_nr', 'val_r'))
smm_porcn <- smm %>% dplyr::select(-value) %>% spread(var, porc)
smm_porcn <- smm_porcn %>% setNames(c('codigo', 'prc_na', 'prc_nr', 'prc_r'))
smm <- inner_join(smm_value, smm_porcn, by = 'codigo')
shp <- inner_join(shp, smm, by = c('MPIO_CCNCT' = 'codigo'))
shp
shp
# Haciendo el mapa de recuperados valores en porcentaje
g1 <- ggplot() +
geom_sf(data = shp, fill = 'prc_r')
g1
shp
# Haciendo el mapa de recuperados valores en porcentaje
g1 <- ggplot() +
geom_sf(data = shp, aes(fill = prc_r))
g1
dpt <- st_read('../shapefiles/MGN_DPTO_POLITICO.shp')
pacman::p_load(raster, rgdal, rgeos, stringr, sf, tidyverse, RColorBrewer)
# Haciendo el mapa de recuperados valores en porcentaje
g1 <- ggplot() +
geom_sf(data = dpt, fill = NA) +
geom_sf(data = shp, aes(fill = prc_r)) +
scale_fill_gradientn(name = 'Porcentaje\nrecuperados',
colours = RColorBrewer::brewer.pal(n = 8, name = 'YlOrBr'))
g1
display.brewer.all()
# Haciendo el mapa de recuperados valores en porcentaje
g1 <- ggplot() +
geom_sf(data = shp, aes(fill = prc_r)) +
geom_sf(data = dpt, fill = NA) +
scale_fill_gradientn(name = 'Porcentaje\nrecuperados',
colours = RColorBrewer::brewer.pal(n = 8, name = 'RdYlGn'),
na.value = 'white') +
ggtitle(label = 'Porcentaje de personas recuperadas\de COVID-19 en Colombia')
# Haciendo el mapa de recuperados valores en porcentaje
g1 <- ggplot() +
geom_sf(data = shp, aes(fill = prc_r)) +
geom_sf(data = dpt, fill = NA) +
scale_fill_gradientn(name = 'Porcentaje\nrecuperadas',
colours = RColorBrewer::brewer.pal(n = 8, name = 'RdYlGn'),
na.value = 'white') +
ggtitle(label = 'Porcentaje de personas recuperadas\nde COVID-19 en Colombia')
g1
dir.create('../png/maps')
# Haciendo el mapa de recuperados valores en porcentaje
g1 <- ggplot() +
geom_sf(data = shp, aes(fill = prc_r)) +
geom_sf(data = dpt, fill = NA) +
scale_fill_gradientn(name = 'Porcentaje\nrecuperadas',
colours = RColorBrewer::brewer.pal(n = 8, name = 'RdYlGn'),
na.value = 'white') +
ggtitle(label = 'Porcentaje de personas recuperadas\nde COVID-19 en Colombia') +
coord_sf() +
theme(plot.title = element_text(hjust = 0.5, size = 18, face = 'bold'))
ggsave(plot = g1, filename = '../png/maps/porcentaje_recuperadas.png',
units = 'in', width = 8, height = 13, dpi = 300)
ggsave(plot = g1, filename = '../png/maps/porcentaje_recuperadas.png',
units = 'in', width = 13, height = 10, dpi = 300)
ggsave(plot = g1, filename = '../png/maps/porcentaje_recuperadas.png',
units = 'in', width = 11, height = 9, dpi = 300)
ggsave(plot = g1, filename = '../png/maps/porcentaje_recuperadas.png',
units = 'in', width = 7, height = 12, dpi = 300)
# Haciendo el mapa de recuperados valores en porcentaje
g1 <- ggplot() +
geom_sf(data = shp, aes(fill = prc_r)) +
geom_sf(data = dpt, fill = NA, size = 1.2) +
scale_fill_gradientn(name = 'Porcentaje\nrecuperadas',
colours = RColorBrewer::brewer.pal(n = 8, name = 'RdYlGn'),
na.value = 'white') +
ggtitle(label = 'Porcentaje de personas recuperadas\nde COVID-19 en Colombia') +
coord_sf() +
theme(plot.title = element_text(hjust = 0.5, size = 18, face = 'bold'))
ggsave(plot = g1, filename = '../png/maps/porcentaje_recuperadas.png',
units = 'in', width = 7, height = 10, dpi = 300)
# Haciendo el mapa de recuperados valores en porcentaje
g1 <- ggplot() +
geom_sf(data = shp, aes(fill = prc_r)) +
geom_sf(data = dpt, fill = NA, size = 1.1) +
scale_fill_gradientn(name = 'Porcentaje\nrecuperadas',
colours = RColorBrewer::brewer.pal(n = 8, name = 'RdYlGn'),
na.value = 'white') +
ggtitle(label = 'Porcentaje de personas recuperadas\nde COVID-19 en Colombia') +
coord_sf() +
theme(plot.title = element_text(hjust = 0.5, size = 18, face = 'bold'))
ggsave(plot = g1, filename = '../png/maps/porcentaje_recuperadas.png',
units = 'in', width = 10, height = 15, dpi = 300)
# Haciendo el mapa de recuperados valores en porcentaje
g1 <- ggplot() +
geom_sf(data = shp, aes(fill = prc_r)) +
geom_sf(data = dpt, fill = NA, size = 1.1) +
scale_fill_gradientn(name = 'Porcentaje\nrecuperadas',
colours = RColorBrewer::brewer.pal(n = 8, name = 'RdYlGn'),
na.value = 'white') +
ggtitle(label = 'Porcentaje de personas recuperadas\nde COVID-19 en Colombia') +
coord_sf() +
theme(plot.title = element_text(hjust = 0.5, size = 18, face = 'bold'),
legend.position = 'bottom',
legend.key.width = unit(5, 'line'))
ggsave(plot = g1, filename = '../png/maps/porcentaje_recuperadas.png',
units = 'in', width = 10, height = 15, dpi = 300)
# Haciendo el mapa de recuperados valores en porcentaje
g1 <- ggplot() +
geom_sf(data = shp, aes(fill = prc_r)) +
geom_sf(data = dpt, fill = NA, size = 1.1) +
scale_fill_gradientn(name = 'Porcentaje\nrecuperadas',
colours = RColorBrewer::brewer.pal(n = 8, name = 'RdYlGn'),
na.value = 'white') +
ggtitle(label = 'Porcentaje de personas recuperadas\nde COVID-19 en Colombia') +
coord_sf() +
theme(plot.title = element_text(hjust = 0.5, size = 18, face = 'bold'),
legend.position = 'bottom',
legend.key.width = unit(5, 'line')) +
labs(caption = 'Adaptado del INS - Agosto 22 2020')
ggsave(plot = g1, filename = '../png/maps/porcentaje_recuperadas.png',
units = 'in', width = 10, height = 15, dpi = 300)
# Haciendo el mapa de recuperados valores en porcentaje
g1 <- ggplot() +
geom_sf(data = shp, aes(fill = prc_r)) +
geom_sf(data = dpt, fill = NA, size = 1.1) +
scale_fill_gradientn(name = 'Porcentaje personas\n(%)',
colours = RColorBrewer::brewer.pal(n = 8, name = 'RdYlGn'),
na.value = 'white') +
ggtitle(label = 'Porcentaje de personas recuperadas\nde COVID-19 en Colombia') +
coord_sf() +
theme(plot.title = element_text(hjust = 0.5, size = 18, face = 'bold'),
legend.position = 'bottom',
legend.key.width = unit(5, 'line')) +
labs(caption = 'Adaptado del INS - Agosto 22 2020')
ggsave(plot = g1, filename = '../png/maps/porcentaje_recuperadas.png',
units = 'in', width = 10, height = 15, dpi = 300)
summary(smm$prc_nr)
smm %>% filter(smm < mean(prc_nr))
smm %>% filter(prc_nr < mean(prc_nr))
summary(smm$prc_r)
smm %>% filter(prc_r < 69.23)
percentile(smm$prc_r, 0.1)
quantile(smm$prc_r, 0.1)
smm %>% filter(prc_r < quantile(smm$prc_r, 0.1))
prc_10 <- smm %>% filter(prc_r < quantile(smm$prc_r, 0.1))
prc_10
shp
inner_join(prc_10, shp %>% as.data.frame() %>% dplyr::select(MPIO_CCNCT, MPIO_CNMBR))
inner_join(prc_10, shp %>% as.data.frame() %>% dplyr::select(MPIO_CCNCT, MPIO_CNMBR), by = c('codigo' = 'MPIO_CCNCT'))
shp
inner_join(prc_10, shp %>% as.data.frame() %>% dplyr::select(MPIO_CCNCT, MPIO_CNMBR, DPTO_CNMBR), by = c('codigo' = 'MPIO_CCNCT'))
dpts <- inner_join(prc_10, shp %>% as.data.frame() %>% dplyr::select(MPIO_CCNCT, MPIO_CNMBR, DPTO_CNMBR), by = c('codigo' = 'MPIO_CCNCT'))
dpts %>% group_by(DPTO_CNMBR) %>% summarise(count = n()) %>% ungroup()
dpts %>% group_by(DPTO_CNMBR) %>% summarise(count = n()) %>% ungroup() %>% arrange(desc(count))
# Cargar librerias --------------------------------------------------------
library(pacman)
pacman::p_load(raster, rgdal, rgeos, stringr, sf, tidyverse, RColorBrewer)
g <- gc(reset = TRUE)
rm(list = ls())
options(scipen = 999)
# Cargar tabla descargada del INS -----------------------------------------
tbl <- read_csv('../tbl/Casos_positivos_de_COVID-19_en_Colombia.csv')
tbl
shp <- st_read('../shapefiles/MGN_MPIO_POLITICO.shp')
dpt <- st_read('../shapefiles/MGN_DPTO_POLITICO.shp')
shp
shp <- shp %>% mutate(MPIO_CCNCT = as.numeric(MPIO_CCNCT))
# Seleccion de columnas de interes
tbl <- tbl[,1:8]
names(tbl) <- c('id', 'fecha', 'codigo', 'ciudad', 'dpto', 'atencion', 'edad', 'sexo')
tbl
# Grafico de cantidad de recuperados versus no recuperados ----------------
unique(tbl$atencion)
gg_1 <- tbl %>%
group_by(atencion) %>%
summarise(count = n()) %>%
ungroup() %>%
arrange(desc(count)) %>%
mutate(atencion = factor(atencion, levels = atencion)) %>%
ggplot(data = ., aes(x = atencion, y = count)) +
geom_col() +
ggtitle(label = 'Estado de las personas contagiadas por COVID - 19 en Colombia') +
theme_bw() +
theme(plot.title = element_text(size = 16, face = 'bold', hjust = 0.5),
axis.text = element_text(size = 12)) +
labs(x = '',
y = 'Cantidad personas',
caption = 'Adaptado del INS - Agosto 22 2020') +
geom_text(aes(label = format(count, big.mark = "\\.", scientific = FALSE)), position=position_dodge(width=0.9), vjust = -0.25) +
scale_y_continuous(labels = function(count) format(count, big.mark = "\\.", scientific = FALSE))
gg_1
tbl %>%
group_by(atencion) %>%
summarise(count = n()) %>%
ungroup()
tbl %>%
group_by(atencion) %>%
summarise(count = n()) %>%
ungroup() %>%
arrange(desc(count)) %>%
mutate(atencion = factor(atencion, levels = atencion))
tbl %>%
group_by(atencion) %>%
summarise(count = n()) %>%
ungroup() %>%
arrange(desc(count)) %>%
mutate(atencion = factor(atencion, levels = atencion)) %>%
ggplot(data = ., aes(x = atencion, y = count)) +
geom_col()
gg_1 <- tbl %>%
group_by(atencion) %>%
summarise(count = n()) %>%
ungroup() %>%
arrange(desc(count)) %>%
mutate(atencion = factor(atencion, levels = atencion)) %>%
ggplot(data = ., aes(x = atencion, y = count)) +
geom_col() +
ggtitle(label = 'Estado de las personas contagiadas por COVID - 19 en Colombia') +
theme_bw() +
theme(plot.title = element_text(size = 16, face = 'bold', hjust = 0.5),
axis.text = element_text(size = 12)) +
labs(x = '',
y = 'Cantidad personas',
caption = 'Adaptado del INS - Agosto 22 2020') +
geom_text(aes(label = format(count, big.mark = "\\.", scientific = FALSE)), position=position_dodge(width=0.9), vjust = -0.25) +
scale_y_continuous(labels = function(count) format(count, big.mark = "\\.", scientific = FALSE))
gg_1
../png/graphics/estado_personas.pn
ggsave(plot = gg_1, filename = '../png/graphics/estado_personas.png', units = 'in', width = 10, height = 7, dpi = 300)
tbl %>%
group_by(codigo, atencion) %>%
dplyr::summarise(count = n()) %>%
ungroup()
tbl %>%
group_by(codigo, atencion) %>%
dplyr::summarise(count = n()) %>%
ungroup() %>%
spread(atencion, count)
# Organizando los datos para el mapa --------------------------------------
smm <- tbl %>%
group_by(codigo, atencion) %>%
dplyr::summarise(count = n()) %>%
ungroup() %>%
spread(atencion, count) %>%
setNames(c('codigo', 'casa', 'fallecido', 'hospital', 'uci', 'na', 'recuperado'))
smm
smm$norecuperado <- smm$casa + smm$hospital + smm$uci
smm <- smm %>% dplyr::select(codigo, recuperado, norecuperado, na)
smm[is.na(smm)] <- 0
smm$codigo <- as.numeric(smm$codigo)
smm <- smm %>%
gather(var, value, -codigo)
smm
smm <- smm %>%
group_by(codigo) %>%
mutate(porc = value / sum(value, na.rm = T) * 100) %>%
ungroup()
smm
smm$porc <- ifelse(is.nan(smm$porc), 0, smm$porc)
smm
smm_value <- smm %>% dplyr::select(-porc) %>% spread(var, value)
smm_value <- smm_value %>% setNames(c('codigo', 'val_na', 'val_nr', 'val_r'))
smm_value
smm_porcn <- smm %>% dplyr::select(-value) %>% spread(var, porc)
smm_porcn <- smm_porcn %>% setNames(c('codigo', 'prc_na', 'prc_nr', 'prc_r'))
smm <- inner_join(smm_value, smm_porcn, by = 'codigo')
shp
smm
shp <- inner_join(shp, smm, by = c('MPIO_CCNCT' = 'codigo'))
shp
# Haciendo el mapa de recuperados valores en porcentaje
g1 <- ggplot() +
geom_sf(data = shp, aes(fill = prc_r)) +
geom_sf(data = dpt, fill = NA, size = 1.1) +
scale_fill_gradientn(name = 'Porcentaje personas\n(%)',
colours = RColorBrewer::brewer.pal(n = 8, name = 'RdYlGn'),
na.value = 'white') +
ggtitle(label = 'Porcentaje de personas recuperadas\nde COVID-19 en Colombia') +
coord_sf() +
theme(plot.title = element_text(hjust = 0.5, size = 18, face = 'bold'),
legend.position = 'bottom',
legend.key.width = unit(5, 'line')) +
labs(caption = 'Adaptado del INS - Agosto 22 2020')
ggsave(plot = g1, filename = '../png/maps/porcentaje_recuperadas.png',
units = 'in', width = 10, height = 15, dpi = 300)
summary(smm$prc_r)
prc_10 <- smm %>% filter(prc_r < quantile(smm$prc_r, 0.1))
prc_10
dpts <- inner_join(prc_10, shp %>% as.data.frame() %>% dplyr::select(MPIO_CCNCT, MPIO_CNMBR, DPTO_CNMBR), by = c('codigo' = 'MPIO_CCNCT'))
dpts
dpts %>% group_by(DPTO_CNMBR) %>% summarise(count = n()) %>% ungroup() %>% arrange(desc(count))
